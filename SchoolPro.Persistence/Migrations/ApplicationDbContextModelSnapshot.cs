// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolWiz.Persistence;

namespace SchoolWiz.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            RoleId = new Guid("4d72ca6b-6a9f-4f2f-b816-fe96dc08d1f2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SchoolWiz.Entity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<Guid>("AccountStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Current")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CurrentPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("HundredTwentyDays")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NinetyDays")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SixtyDays")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ThirtyDays")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("GuardianId");

                    b.ToTable("Accounts","billing");
                });

            modelBuilder.Entity("SchoolWiz.Entity.AccountRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("RateId");

                    b.HasIndex("AccountId", "RateId");

                    b.ToTable("AccountRates","billing");
                });

            modelBuilder.Entity("SchoolWiz.Entity.AccountStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountStatuses","billing");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55b35573-7d5c-4142-8c7f-9e1ce1425898"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(705),
                            IsDeleted = false,
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("de4649fd-e49d-43f7-9e04-a779cfade4ae"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(739),
                            IsDeleted = false,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountTypes","billing");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ceda47f-c8ba-4af3-a9e0-dbf4adbe80b1"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(2985),
                            IsDeleted = false,
                            Name = "Monthly"
                        },
                        new
                        {
                            Id = new Guid("23ec936b-c364-4e7b-bffd-52dffa0b4c94"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(3023),
                            IsDeleted = false,
                            Name = "Annual"
                        },
                        new
                        {
                            Id = new Guid("068cd348-f51f-4d5e-b265-5ff8db1de74b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(3027),
                            IsDeleted = false,
                            Name = "Add-hoc"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComplexName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("UnitNumber", "ComplexName", "StreetAddress", "Suburb", "CityId", "PostalCode")
                        .IsUnique()
                        .HasFilter("[UnitNumber] IS NOT NULL AND [ComplexName] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SchoolWiz.Entity.AddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0943a261-05b3-4334-9090-7b053166c2ce"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(4259),
                            IsDeleted = false,
                            Name = "Postal"
                        },
                        new
                        {
                            Id = new Guid("4ab8918d-44c4-48f0-a7ac-11e1b21739bc"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(4287),
                            IsDeleted = false,
                            Name = "Physical"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cec7ca53-24d5-4dce-ae16-15d43a1c1633",
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            DateCreated = new DateTime(2020, 11, 6, 12, 29, 21, 516, DateTimeKind.Local).AddTicks(7806),
                            Email = ";udwign@lucasdev.co.za",
                            EmailConfirmed = true,
                            FirstName = "Ludwig",
                            IdentityNumber = "8101145019087",
                            IsDeleted = false,
                            LastName = "Nel",
                            LockoutEnabled = false,
                            MiddleName = "Paul",
                            MobileNumber = "0835651243",
                            NormalizedEmail = "LUDWIGN@LUCASDEV.CO.ZA",
                            NormalizedUserName = "LUDWIGN@LUCASDEV.CO.ZA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHF9Gu6chaM9xAyxb9YRSNVLdTW0yykw93sVTInHlOtnqoY6fUMNMG3qybuKyBhZ9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "ludwign@lucasdev.co.za"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("Name", "ProvinceId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("400b1f6a-da3d-4964-96bb-2e56e36dcef4"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9505),
                            IsDeleted = false,
                            Name = "Alexandra",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("3e080284-726a-4ad9-ba92-7aad461162c4"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9540),
                            IsDeleted = false,
                            Name = "Johannesburg",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("ddaad733-161e-42f6-9376-2f383ad681e9"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9543),
                            IsDeleted = false,
                            Name = "Lenasia",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("d41d5548-a92b-4616-b561-f12fe750674b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9544),
                            IsDeleted = false,
                            Name = "Midrand",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("63b55693-85b9-4631-8ecf-79f29c0f6eaa"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9546),
                            IsDeleted = false,
                            Name = "Randburg",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("b4313ab9-7cf6-46e0-9c9b-a227e6d84ce5"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9548),
                            IsDeleted = false,
                            Name = "Roodepoort",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("834b3cca-d2b4-443c-9c54-bde52ad8000b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9549),
                            IsDeleted = false,
                            Name = "Sandton",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("fa635702-1d94-4be8-8feb-a5d9c3b8bdb9"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9551),
                            IsDeleted = false,
                            Name = "Soweto",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("1438f6de-7683-4a78-b6c7-705b04c42ab1"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9552),
                            IsDeleted = false,
                            Name = "Alberton",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("1aa2d8e2-f85e-456c-b211-2900a2ac911b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9556),
                            IsDeleted = false,
                            Name = "Benoni",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("fecfaa5e-1c57-4806-b0e9-e62d6b0c621e"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9558),
                            IsDeleted = false,
                            Name = "Boksburg",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("d7c43955-ca7f-44ca-9caa-e71cdd3e79d3"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9559),
                            IsDeleted = false,
                            Name = "Brakpan",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("deda1e34-f19d-4263-963c-6f042892965e"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9561),
                            IsDeleted = false,
                            Name = "Daveyton",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("56e01e6f-939d-4785-9c40-1a9b293b36d3"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9562),
                            IsDeleted = false,
                            Name = "Edenvale",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("8b74b470-555b-486f-beb7-fbc16ea25b1b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9564),
                            IsDeleted = false,
                            Name = "Germiston",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("f8217604-1677-4dd8-8efb-6d39de07f3ca"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9565),
                            IsDeleted = false,
                            Name = "Isando",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("6311dda9-6e96-4021-a7f8-7a34f49552c2"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9567),
                            IsDeleted = false,
                            Name = "Kempton Park",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("dfcc28c4-ccd3-447a-8f5e-fdf6553c20d0"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9570),
                            IsDeleted = false,
                            Name = "Nigel",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("e98751a8-65bb-4c9c-87ea-ffc19501f8d7"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9571),
                            IsDeleted = false,
                            Name = "Reiger Park",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("0839ee73-aa0b-40d4-86a9-6c4e38704d45"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9573),
                            IsDeleted = false,
                            Name = "Springs",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("c10d5f2c-891c-4871-adc5-c11b70e39e2a"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9574),
                            IsDeleted = false,
                            Name = "Tembisa",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("c903cd6e-696f-408e-880b-ba9b5a585cb9"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9576),
                            IsDeleted = false,
                            Name = "Centurion",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("462b558e-eabc-4db9-b284-f311614b8c64"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9577),
                            IsDeleted = false,
                            Name = "Hammanskraal",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("c63999e8-0024-4cf6-a2c4-5597fdb6565a"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9579),
                            IsDeleted = false,
                            Name = "Irene",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("4f193e1a-10ad-4098-830d-84c13da89b41"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9581),
                            IsDeleted = false,
                            Name = "Pretoria",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("bb12096c-813c-49d4-9110-b0e55bf63b77"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9584),
                            IsDeleted = false,
                            Name = "Vanderbijlpark",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("888733bb-1e12-41d2-ba1d-10bf449009a8"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9585),
                            IsDeleted = false,
                            Name = "Vereeniging",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("9128bdb7-ed22-4d3f-916f-d3d36fb3b93b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9587),
                            IsDeleted = false,
                            Name = "Meyerton",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("042d44f0-e0e9-4e6f-be2a-d2168b09c524"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9589),
                            IsDeleted = false,
                            Name = "Heidelberg",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("88397a66-0eaf-4108-8309-a1a97ecf99c0"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9590),
                            IsDeleted = false,
                            Name = "Krugersdorp",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("e60e5b7a-e62c-4843-b90c-003759abad63"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9592),
                            IsDeleted = false,
                            Name = "Magaliesburg",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("f3cfe5d6-1cdb-416e-b525-ac2ceacdad9e"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9593),
                            IsDeleted = false,
                            Name = "Randfontein",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("8b9287e0-72f4-45d6-a34c-d7dc3ba60d9c"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9595),
                            IsDeleted = false,
                            Name = "Bekkersdal",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        },
                        new
                        {
                            Id = new Guid("37c63acd-4214-4b0d-8fab-01ab8156ed8c"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(9598),
                            IsDeleted = false,
                            Name = "Westonaria",
                            ProvinceId = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15")
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(7059),
                            IsDeleted = false,
                            Name = "South Africa"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2bebaed-4e94-4712-a0b2-cfce5b89451b"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6192),
                            IsDeleted = false,
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("a335c72b-e31d-46e2-b398-4dea15cb2c85"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6221),
                            IsDeleted = false,
                            Name = "2"
                        },
                        new
                        {
                            Id = new Guid("472f8e10-348f-42a1-99c9-cf0b31e2e836"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6223),
                            IsDeleted = false,
                            Name = "3"
                        },
                        new
                        {
                            Id = new Guid("09b463be-8d65-401c-bdc4-704598503960"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6225),
                            IsDeleted = false,
                            Name = "4"
                        },
                        new
                        {
                            Id = new Guid("9a892619-e36c-418e-be00-fd5858e9b352"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6228),
                            IsDeleted = false,
                            Name = "5"
                        },
                        new
                        {
                            Id = new Guid("b1c259c6-8995-4f96-9060-e1c9cb0e6c60"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6229),
                            IsDeleted = false,
                            Name = "6"
                        },
                        new
                        {
                            Id = new Guid("ecd28d1d-90f6-4507-9a78-3c41a0b5ab3c"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6231),
                            IsDeleted = false,
                            Name = "7"
                        },
                        new
                        {
                            Id = new Guid("369f5897-4bc4-4899-9772-4a51398f576f"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6242),
                            IsDeleted = false,
                            Name = "8"
                        },
                        new
                        {
                            Id = new Guid("d2312d25-3d2b-49ec-8ff2-dfb1fee357b6"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6243),
                            IsDeleted = false,
                            Name = "9"
                        },
                        new
                        {
                            Id = new Guid("8098792a-0267-4d94-81ac-8ab24c5bda90"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6245),
                            IsDeleted = false,
                            Name = "10"
                        },
                        new
                        {
                            Id = new Guid("7e625f5d-0256-4814-8af1-abe70a56f704"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6246),
                            IsDeleted = false,
                            Name = "11"
                        },
                        new
                        {
                            Id = new Guid("5941a142-8280-4e6f-9c30-854b7d129e4f"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(6248),
                            IsDeleted = false,
                            Name = "12"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.Guardian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("GuardianTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkPhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("GuardianTypeId");

                    b.HasIndex("IdentityNumber", "FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("SchoolWiz.Entity.GuardianAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("GuardianId", "AddressId")
                        .IsUnique();

                    b.ToTable("GuardianAddresses");
                });

            modelBuilder.Entity("SchoolWiz.Entity.GuardianType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GuardianTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8296c7a7-62e5-4ffa-bcda-8eef49dbb433"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(5332),
                            IsDeleted = false,
                            Name = "Mother"
                        },
                        new
                        {
                            Id = new Guid("b24a381b-d887-4af2-a3db-cd1226e03e86"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(5369),
                            IsDeleted = false,
                            Name = "Father"
                        },
                        new
                        {
                            Id = new Guid("b9946f91-8e24-492f-9656-33fe2feeebc2"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(5372),
                            IsDeleted = false,
                            Name = "Grand Mother"
                        },
                        new
                        {
                            Id = new Guid("1a227c52-a576-4222-8afc-424921239072"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(5375),
                            IsDeleted = false,
                            Name = "Grand Father"
                        },
                        new
                        {
                            Id = new Guid("73d81136-2647-45c7-a011-018f6bed2c8a"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(5377),
                            IsDeleted = false,
                            Name = "Aunt"
                        },
                        new
                        {
                            Id = new Guid("3087b823-1620-4e7b-87fd-b5dd45f3d5f3"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(5379),
                            IsDeleted = false,
                            Name = "Uncle"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSettled")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.Property<Guid?>("InvoiceRunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Settled")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalExcludingVat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalIncludingVat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalVat")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceRunId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Invoices","billing");
                });

            modelBuilder.Entity("SchoolWiz.Entity.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("ItemCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ItemTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("VatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("VatId");

                    b.ToTable("InvoiceItems","billing");
                });

            modelBuilder.Entity("SchoolWiz.Entity.InvoiceRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceRuns");
                });

            modelBuilder.Entity("SchoolWiz.Entity.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("403bcfb4-15d9-4833-92b1-21641d7be853"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8220),
                            IsDeleted = false,
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            Id = new Guid("90ee2c5f-57b7-48e2-a25c-b2a126d5b9d3"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8255),
                            IsDeleted = false,
                            Name = "Free state"
                        },
                        new
                        {
                            Id = new Guid("51c34b2c-9074-4f02-9fcc-c8c8652adb15"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8257),
                            IsDeleted = false,
                            Name = "Gauteng"
                        },
                        new
                        {
                            Id = new Guid("bdf8a156-274b-4034-85e2-2b9ffcf77d2e"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8259),
                            IsDeleted = false,
                            Name = "KwaZulu-Natal"
                        },
                        new
                        {
                            Id = new Guid("bc05dda5-93a8-4318-922b-958164727e38"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8260),
                            IsDeleted = false,
                            Name = "Limpopo"
                        },
                        new
                        {
                            Id = new Guid("12ee319f-6e8a-43ad-a3d2-68eb125aba01"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8263),
                            IsDeleted = false,
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            Id = new Guid("87568b2a-e5cd-421d-beb6-d82eefaa6a98"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8264),
                            IsDeleted = false,
                            Name = "North West"
                        },
                        new
                        {
                            Id = new Guid("3ec29e86-1983-46b9-a611-bab4a9dd7bcb"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8266),
                            IsDeleted = false,
                            Name = "Northern Cape"
                        },
                        new
                        {
                            Id = new Guid("67a1a6ec-8831-42dd-8b6a-17ce0b2ca471"),
                            CountryId = new Guid("f502aa59-b2e0-4626-ae06-bb0820df807d"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 10, 29, 21, 534, DateTimeKind.Utc).AddTicks(8267),
                            IsDeleted = false,
                            Name = "Western Cape"
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Description", "ValidFrom", "ValidTo");

                    b.ToTable("Rates","billing");
                });

            modelBuilder.Entity("SchoolWiz.Entity.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<byte[]>("ImageUrl")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dac1439-090a-4e1d-b01f-a0afd4e83091"),
                            ContactPerson = "Ted Coffin",
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 12, 29, 21, 533, DateTimeKind.Local).AddTicks(9274),
                            Email = "tedc@destinychangeracademy.co.za",
                            IsDeleted = false,
                            Name = "Destiny Changers Academy",
                            PhoneNumber = "0824693520",
                            RegistrationNo = "",
                            VatNo = ""
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.SchoolAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("SchoolId", "AddressId");

                    b.ToTable("SchoolAddress");
                });

            modelBuilder.Entity("SchoolWiz.Entity.Statement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<decimal>("TotalExcludingVat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalIncludingVat")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalVat")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Statements","billing");
                });

            modelBuilder.Entity("SchoolWiz.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Doctor")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DoctorPhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<bool>("MedicationCausesDrowsiness")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("UnderSupervisedMedication")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdentityNumber", "FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolWiz.Entity.StudentGuardian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PrimaryContact")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.HasIndex("StudentId", "GuardianId")
                        .IsUnique();

                    b.ToTable("StudentGuardians");
                });

            modelBuilder.Entity("SchoolWiz.Entity.StudentRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRegistrations");
                });

            modelBuilder.Entity("SchoolWiz.Entity.Vat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("Value", "ValidFrom", "ValidTo");

                    b.ToTable("Vat");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37f9006b-6ce3-4052-a2df-0d8ed0848c25"),
                            CreatedById = new Guid("b98f1f13-302a-406a-83c1-faff38f72b77"),
                            CreatedDate = new DateTime(2020, 11, 6, 12, 29, 21, 535, DateTimeKind.Local).AddTicks(1224),
                            IsDeleted = false,
                            Value = 15m
                        });
                });

            modelBuilder.Entity("SchoolWiz.Entity.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedByDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d72ca6b-6a9f-4f2f-b816-fe96dc08d1f2"),
                            ConcurrencyStamp = "f8b710e0-56dc-4717-b8d5-845836710e5c",
                            Name = "Administrator",
                            NormalizedName = "Administrator",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7d8f90f5-761b-4136-864a-8ddec2a4a754"),
                            ConcurrencyStamp = "03a40b3a-c2a8-427f-8b0e-8a206743c1bc",
                            Name = "Teacher",
                            NormalizedName = "Teacher",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fcc4f5ce-7bf7-405f-906e-68c839a12439"),
                            ConcurrencyStamp = "fa1cfacb-21b0-477c-8f27-b53e3f5f8158",
                            Name = "Billing",
                            NormalizedName = "Billing",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolWiz.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolWiz.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolWiz.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.Account", b =>
                {
                    b.HasOne("SchoolWiz.Entity.AccountStatus", "AccountStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.Guardian", "Guardian")
                        .WithMany("Accounts")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.AccountRate", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Account", "Account")
                        .WithMany("AccountRates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.Invoice", null)
                        .WithMany("AccountRates")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("SchoolWiz.Entity.Rate", "Rate")
                        .WithMany("AccountRates")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.Address", b =>
                {
                    b.HasOne("SchoolWiz.Entity.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.AddressType", b =>
                {
                    b.HasOne("SchoolWiz.Entity.AddressType", null)
                        .WithMany("AddressTypes")
                        .HasForeignKey("AddressTypeId");
                });

            modelBuilder.Entity("SchoolWiz.Entity.City", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.Guardian", b =>
                {
                    b.HasOne("SchoolWiz.Entity.GuardianType", "GuardianType")
                        .WithMany("Guardians")
                        .HasForeignKey("GuardianTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.GuardianAddress", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Address", "Address")
                        .WithMany("GuardianAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.Guardian", "Guardian")
                        .WithMany("GuardianAddresses")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.Invoice", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.InvoiceRun", "InvoiceRun")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceRunId");

                    b.HasOne("SchoolWiz.Entity.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.InvoiceItem", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.Province", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.SchoolAddress", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Address", "Address")
                        .WithMany("SchoolAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.Statement", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Account", "Account")
                        .WithMany("Statements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.StudentGuardian", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Guardian", "Guardian")
                        .WithMany("StudentGuardians")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.Student", "Student")
                        .WithMany("StudentGuardians")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWiz.Entity.StudentRegistration", b =>
                {
                    b.HasOne("SchoolWiz.Entity.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolWiz.Entity.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
